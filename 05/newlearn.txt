오류의 종류

- 문법 오류 (Syntax Errors)
    : 사용자의 문법 실수로 발생

- 런타임 에러 (Runtime Error)
    : 코드를 실행하려고 할때, 멈춰버리는 현상,
    문법의 오류는 없으나 코드의 구조상의 문제로 인해 발생하는 오류
    ex) 함수의 return 문 이후에 작동해야 하는 코드를 작성

- 논리 에러 (Logic Error)
    : 알고리즘의 오류로 프로그램이 원하는데로 작동하지 않는 에러

------------------------


const app = express() 로 생성된 app은
res,req 가 있어서 
app.listen() 은 결국

const app = express();
const server = http.createServer(app);
server.listen();
과 같음

express의 핵심 구조는 '미들웨어'임

클라이언트에서 온 요청은 우리가 코드상에 정의해둔 순서대로
여러 미들웨어를 거져서 응답으로 나가게됨

따라서 app.use 의 순서는 유의미함

app.use는 오버라이딩 함수로써, 5가지 형태가 있음
app.use는 세 가지 인자를 받는데
    requset 객체,
    response 객체,
    next 함수
임

app.use()는 express의 미들웨어의 가장 기본적인 형태이며
한 미들웨어는 요청을 받고 끝낼수도, next()함수를 통해
다른 미들웨어로 이어갈 수도 있음

------------------------

res.redirect('/') 를 통해 사용자를 다른 url로 
리다이렉트 시킬 수 있음

------------------------

res.send() 는 어떤 자료형도 전송할 수 있어서
express에서는 그에 맞춰서 res의 header의
Content-type을 알아서 조정함

------------------------

라우터 파일의 기본 형식

const express = require('express');

const router = express.Router();

"""
router.xxx((req,res,next)=>{

})
"""

module.exports = router;

------------------------

66
- app.use과 app.get의 차이
    - use는 해당 url이 포함된 모든 요청의 미들웨어임
    - get는 해당 url과 정확히 일치하는 요청만 처리함

- 404 not found 
    - 일반적으로 404페이지는 가장 아래쪽에 위치 시켜 어떤 라우터에도 해당되지 않을 경우 라우팅 되도록함
    - 404는 app.use를 사용하여 get메소드 만이 아닌, 응답할 수 없는 모든 요청에 대해 404로 응답

- res.status(xxx).send()
    - res.send 가운데에 status 구문을 사용하여 header의 statuscode를 설정할 수 있음
    - 404에서는 res.status(404).send( 404에러 페이지 전송) 과 같이 사용가능

- express의 Router에는 공통된 url를 지정할 수 있음
    - app.use('/admin',adminRoutes); 와 같이 사용하여 url이 /admin/xxx 와 같은 모든 url이 라우팅 되도록 할 수 있음
    - 따라서 admin.js의 router.get('/add-product, () => {}) 는 사실
        xxx/admin/add-product 의 요청을 처리함


------------------------

- sendFile
    - 서버가 응답으로 정적파일을 전송할때 사용
    - express앱의 res.sendFile()로 사용
- path
    - sendFile을 사용할 때는 반드시 path.join을 사용하여 절대경로로 적어주어야 함
    - 안그럼 에러남 내가 해봄
- require.main
    - 현재 실행되는 모듈의 정보가 있는 전역 변수
- require.main.file
    - npm start를 통해 실행되는 메인 파일의 경로